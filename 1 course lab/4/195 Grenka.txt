#include <iostream>
using namespace std;
bool check[1000000] = { false };
int k = 0;

class Node
{
public:
	Node* next;
	int val;
	Node(int val, Node* next = nullptr)
	{
		this->val = val;
		this->next = next;
	}
};

class List
{
public:
	List();
	~List();
	void push(int val);
	int  pop();
	int pop_front();
	bool empty();
	void push_front(int val);
	void print();
	Node* head;
	Node* end;
};

struct component
{
	int size;
	List ver;
};

component cmpnt[100000];

List::List()
{
	head = nullptr;
	end = nullptr;
}

List::~List()
{
	Node* cur;
	while (head != nullptr)
	{
		cur = head;
		head = head->next;
		delete cur;
	}
}

void List::push(int val)
{
	if (head == nullptr) end = head = new Node(val);
	else
	{
		Node* cur = this->end;
		cur->next = new Node(val);
		end = cur->next;
	}
}

int List::pop()
{
	Node* cur = this->head;
	Node* rem = this->end;
	int val = end->val;
	if (head == end) head = end = nullptr;
	else
	{
		while (cur->next != end) cur = cur->next;
		cur->next = nullptr;
		end = cur;
	}
	delete rem;
	return val;
}

int List::pop_front()
{
	if (!head) return -1;
	Node* cur = head;
	int n = cur->val;
	head = head->next;
	if (!head) end = nullptr;
	delete[] cur;
	return n;
}

void List::push_front(int val)
{
	Node* cur = new Node(val);
	cur->next = head;
	head = cur;
	if (!end) end = cur;
}

void List::print()
{
	Node* cur = this->head;
	while (cur != nullptr)
	{
		cout << cur->val + 1 << " ";
		cur = cur->next;
	}
}


void BFS(int** g, int n, int v1)
{
	k++;
	int* lev = new int[n]();
	cmpnt[k].size = 1;
	lev[v1] = 1;
	List lst;
	lst.push(v1);
	cmpnt[k].ver.push(v1);
	for (int u = lst.pop_front(); u >= 0; u = lst.pop_front()) {
		for (int x = 0; x < n; x++) {
			if (g[u][x] && !lev[x]) {
				lev[x] = lev[u] + 1;
				lst.push(x);
				cmpnt[k].size++;
				cmpnt[k].ver.push(x);
				check[x] = true;
			}
		}
	}
}


int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int n;
	cin >> n;
	int** g = new int* [n];
	for (int i = 0; i < n; i++)
		g[i] = new int[n];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> g[i][j];
		}
	}
	for (int i = 0; i < n; i++) {
		if (!check[i]) BFS(g, n, i);
	}
	cout << k << endl;
	for (int i = 1; i <= k; i++) {
		cout << cmpnt[i].size << " ";
		cmpnt[i].ver.print();
		cout << endl;
	}
}