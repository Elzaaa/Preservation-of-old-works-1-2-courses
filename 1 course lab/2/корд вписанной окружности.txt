#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

struct dot  // (x,y)
{
	double x;
	double y;
};

struct line // ax+by+c = 0
{
	double a;
	double b;
	double c;
};

struct LineSegment
{
	dot A;
	dot B;
};

struct triangle
{
	dot A;
	dot B;
	dot C;
};

bool MakeLineFromSegment(LineSegment t, line *z) // return crossing line
{
	//ax+by+c = 0

	z->a = t.A.y - t.B.y;
	z->b = t.B.x - t.A.x;
	z->c = t.A.x * t.B.y - t.B.x * t.A.y;

	return true;
}

/*bool iCrossTwoLine(line al, line bl, dot *z) // return crossing dot
{
z->x = -1 * ((al.c * bl.b - bl.c * al.b) / (al.a * bl.b - bl.a * al.b));
z->y = -1 * ((al.a * bl.c - bl.a * al.c) / (al.a * bl.b - bl.a * al.b));
return true;
}*/
bool CrossTwoLine(line al, line bl, dot *z)
{

	/*double d = al.a*bl.b - bl.a*al.b;
	z->x = (al.b*bl.c - bl.b*al.c) / d;
	z->y = (bl.a*al.c - al.a*bl.c) / d;
	return true;*/
	z->x = (al.c*bl.a - al.a*bl.c) / (al.a*bl.b - al.b*bl.a);
	z->y = (al.a*bl.c - al.c*bl.b) / (al.a*bl.b - al.b*bl.a);
	return true;
}

double LengthOfSegment(LineSegment seg)
{
	// AB= sqrt( (Xb-Xa)^2 + (Yb-Ya)^2 ) Where: A(Xa;Ya) && B(Xb;Yb)
	return 	sqrt(((seg.B.x - seg.A.x) * (seg.B.x - seg.A.x)) + ((seg.B.y - seg.A.y)* (seg.B.y - seg.A.y)));
}
//??? ??? ?? ????????? ?????? 
bool Bisector_plus(line one, line two, line * Bis)
{
	double m = sqrt(one.a * one.a + one.b * one.b);
	double n = sqrt(two.a * two.a + two.b * two.b);

	Bis->a = one.a * n - two.a * m;//???????????? ????? ?? ????? x/y=b/a =>  x*a=y*b
	Bis->b = one.b * n - two.b * m;
	Bis->c = one.c * n - two.c * m;
	return true;
}

bool Bisector_minus(line one, line two, line * Bis)
{
	double m = sqrt(one.a * one.a + one.b * one.b);
	double n = sqrt(two.a * two.a + two.b * two.b);

	Bis->a = one.a * n + two.a * m;
	Bis->b = one.b * n + two.b * m;
	Bis->c = one.c * n + two.c * m;
	return true;
}
//????? ????? ??????? 
bool Bis_sign(line one/*? ??? ???????? ?????? ???????*/, line two, LineSegment seg, line*Bis)//* ?????????(?????) ?? ?????? ???? line 
{
	line plus, minus;
	Bisector_plus(one, two, &plus);
	Bisector_minus(one, two, &minus);

	if ((plus.a *  seg.A.x + plus.b * seg.A.y + plus.c) / (plus.a * seg.B.x + plus.b * seg.B.y + plus.c) > 0)
	{
		//*Bis = min;min ???????? ?? ?????? Bis
		//Bis[0] = min;
		Bis->a = minus.a;//-> ?????? ? ??????? | . ?????? ? ???????? 
		Bis->b = minus.b;
		Bis->c = minus.c;
	}
	else //*Bis = plus;
	{
		Bis->a = plus.a;//-> ?????? ? ??????? | . ?????? ? ???????? 
		Bis->b = plus.b;
		Bis->c = plus.c;
	}
	return true;
}
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	//double dlina_a, dlina_b, dlina_c, dPerimeter, dSquare,x0,y0, dAngle_a, dAngle_b, dAngle_c;

	triangle S;
	cin >> S.A.x >> S.A.y >> S.B.x >> S.B.y >> S.C.x >> S.C.y;
	LineSegment a;
	LineSegment b;
	LineSegment c;
	//line a ,section BC coordinates 
	a.A.x = S.B.x;
	a.A.y = S.B.y;
	a.B.x = S.C.x;
	a.B.y = S.C.y;

	//line b ,section AC coordinates 
	b.A.x = S.A.x;
	b.A.y = S.A.y;
	b.B.x = S.C.x;
	b.B.y = S.C.y;

	//line c ,section AB coordinates 
	c.A.x = S.B.x;
	c.A.y = S.B.y;
	c.B.x = S.A.x;
	c.B.y = S.A.y;
	line  la, lb, lc;
	MakeLineFromSegment(a, &la);
	MakeLineFromSegment(b, &lb);
	MakeLineFromSegment(c, &lc);
	line v, k;
	Bis_sign(la, lb, a, &v);//&-??????? ?????? 'v' ? ??????? ? ???????? ?????? ? ???????
	Bis_sign(lb, lc, b, &k);

	dot DotaCross;
	CrossTwoLine(v, k, &DotaCross);

	cout << fixed << setprecision(9) << DotaCross.x << " " << DotaCross.y;
	return 0;
}